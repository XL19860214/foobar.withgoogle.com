num_buns will always be between 1 and 9, and num_required will always be between 0 and 9 (both inclusive).

(num_buns, num_required)


# (2, nR)

## (2, 1)
[
    [0],
    [0]
]

## (2, 2)
[
    [0   ],
    [   1]
]

(2, [3 - 9]) Invalid


# (3, nR)

## (3, 1)
[
    [0],
    [0],
    [0]
]

## (3, 2)
# 0, 1, 2
[
    [0, 1   ],
    [0,    2],
    [   1, 2]
]

[
    [0, 1   ],
    [   1, 2],
    [0,    2]
]

## (3, 3)
[
    [0      ],
    [   1   ],
    [      2]
]

(3, [4 - 9]) Invalid


# (4, nR)

## (4, 1)
[
    [0],
    [0],
    [0],
    [0]
]

## (4, 2)
nB > Duplicate Keys > 1

### 2 Locks with 2 Duplicate Keys
- [0, 1] * 2
- 4 / 4 = 1
[
    [0   ],
    [0   ],
    [   1],
    [   1]
]
"Invalid"

### 4 Locks with 2 Duplicate Keys
- [0, 1, 2, 3] * 2
- 8 / 4 = 2
[
    [0, 1      ],
    [0,    2   ],
    [   1     3],
    [      2, 3]
]

#### nCr(4, 2) = 6
[0, 1      ]
[0,    2   ]
[0,       3]
[   1, 2   ]
[   1,    3]
[      2, 3]

6 % 4 != 0

"Invalid"

### 4 Locks with 3 Duplicate Keys
- [0, 1, 2, 3] * 3
- 12 / 4 = 3
- nCr(4, 3) = 4
[
    [0, 1, 2   ],
    [0, 1,    3],
    [0,    2, 3],
    [   1, 2, 3],
]
"Valid"

## (4, 3)
nB > Duplicate Keys > 1

### 2 Locks with 2 Duplicate Keys
"Invalid"

### 4 Locks with 2 Duplicate Keys
- [0, 1, 2, 3] * 2
- 8 / 4 = 2
- nCr(4, 2) = 6
- nCr(6, 4) = 

[
    [0, 1      ],
    [   1, 2   ],
    [      2, 3],
    [0,       3]
]

[
    [0, 1      ],
    [0,       3],
    [   1, 2   ],
    [      2, 3]
]

> You know that Command Lambda wouldn't issue more keys than necessary (beyond what the key distribution scheme requires)

# 0, 1, 2, | 3, 4, 5
[
    [0, 1, 2,          ],
    [0,         3, 4   ],
    [   1,      3,    5],
    [      2,      4, 5]
]

Enable rabbit 1 with "0, 1, 2", leave out "3, 4, 5" to other rabbits.
Use "3, 4, 5" to simulate (3, 2) in rabbit 2, rabbit 3, rabbit 4.

(4, 4)
[
    [0        ],
    [   1     ],
    [      2  ],
    [        3]
]


(5, 1)
[
    [0],
    [0],
    [0],
    [0],
    [0]
]

(5, 2)
# 0, 1, 2, 3, 4
[
    [0, 1, 2, 3   ],
    [0, 1, 2,    4],
    [0, 1,    3, 4],
    [0,    2, 3, 4],
    [   1, 2, 3, 4],
]

# (0, 1, 2) * 5
[
   [0, 1, 2],

]

## (5, 3)
nB > Duplicate Keys > nB - nR
5 > Duplicate Keys > 2
* 5 Locks with 3 Duplicate Keys
* 5 Locks with 4 Duplicate Keys
* 10 Locks with 3 Duplicate Keys
* 10 Locks with 4 Duplicate Keys


### 5 Locks with 3 Duplicate Keys
- nL = 5, nD = 3
- [0, 1, 2, 3, 4] * 3
- nK = 15 / 5 = 3
- nL - nK = 2
- nR - 1 = 2
- How many key chains combination? nCr(5, 3) = 10
- How many solutions combination? nCr(10, 5) = 252

[
    [0, 1, 2      ],
    [0, 1,    3   ],
    [0, 1,       4],
    [      2, 3, 4],
    [      2, 3, 4]
]
[
    [0, 1, 2      ],
    [0, 1, 2      ],
    [0,       3, 4],
    [   1,    3, 4],
    [      2, 3, 4]
]

"Invalid"

### 5 Locks with 4 Duplicate Keys
- nL = 5, nD = 4
- [0, 1, 2, 3, 4] * 4
- nK = 20 / 5 = 4
- nL - nK = 1

nL - nK < nR - 1
"Invalid"

### 10 Locks with 3 Duplicate Keys
- nL = 10, nD = 3
- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] * 3
- nK = 30 / 5 = 6
- nL - nK = 4
- nR - 1 = 2
- nL - nK > nR - 1
- nCr(10, 6) = 210
- nCr(210, 5) = 3,244,032,792
- nCr(5, 3) = 10
[
    [0, 1, 2,    3, 4, 5                ],
    [0, 1, 2,               6, 7, 8     ],
    [0,          3, 4,      6, 7,      9],
    [   1,       3,    5,   6,    8,   9],
    [      2,       4, 5,      7, 8,   9]
]
"Valid"

(5, 4)
[
    [0, 1         ],
    [   1, 2      ],
    [      2, 3   ],
    [         3, 4],
    [0,          4]
]

[
    [0, 1         ],
    [0,          4],
    [   1, 2      ],
    [      2, 3   ],
    [         3, 4]
]
"Fail test" but "Valid"

[
    [0, 1, 2, 3                  ],
    [0,          4, 5, 6         ],
    [   1,       4,       7, 8   ],
    [      2,       5,    7,    9],
    [         3,       6,    8, 9]
]
"Pass test"

(5, 5)
[
    [0            ],
    [   1         ],
    [      2      ],
    [         3   ],
    [            4]
]

# (6, nR)

## (6, 1)
[
    [0],
    [0],
    [0],
    [0],
    [0],
    [0]
]

## (6, 2)
# 0, 1, 2, 3, 4, 5
[
    [0, 1, 2, 3, 4,  ],
    [0, 1, 2, 3,    5],
    [0, 1, 2,    4, 5],
    [0, 1,    3, 4, 5],
    [0,    2, 3, 4, 5],
    [   1, 2, 3, 4, 5],
]

## (6, 3) #DEV

### 2 Locks with 3 Duplicate Keys
[0, 1] * 3
6 / 6 = 1
[
    [0      ],
    [0      ],
    [0      ],
    [   1   ],
    [   1   ],
    [   1   ]
]
"Invalid"

### 3 Locks with 2 Duplicate Keys
[0, 1, 2] * 2
6 / 6 = 1
[
    [0      ],
    [0      ],
    [   1   ],
    [   1   ],
    [      2],
    [      2]
]
"Invalid"

### 4 Locks with 3 Duplicate Keys
[0, 1, 2, 3] * 3
12 / 6 = 2
[
    [0, 1      ],
    [0,    2   ],
    [0,       3],
    [   1, 2   ],
    [   1,    3],
    [      2, 3]
]
"Valid"

(6, 4) #DEV


(6, 5)
[
    [0, 1            ],
    [0,             5],
    [   1, 2         ],
    [      2, 3      ],
    [         3, 4   ],
    [            4, 5]
]

(6, 6)
[
    [0],
    [1],
    [2],
    [3],
    [4],
    [5]
]
